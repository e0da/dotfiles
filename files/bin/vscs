#!/bin/bash

if [ ! -z "$DEBUG" ]; then
  set -x
fi

OK=0
USAGE=1
SCRIPT_NAME="$(basename "$0")"
DEFAULT_LIST="$HOME/src/dotfiles/files/$SCRIPT_NAME.list"

LIST=${LIST:-$DEFAULT_LIST}
LINUX_USER_CFG=${SRC:-"$HOME/.config/Code/User"}
WINDOWS_USER_CFG=${TGT:-"$HOME/AppData/Code/User"}

USAGE_TEXT="Sync your Visual Studio Code config

Usage: $SCRIPT_NAME [ACTION]

ACTIONS
  default - [default] do the contextual default action
  linux   - [Linux default] upgrade then export
  windows - [Windows Subsystem for Linux default] lin2win then upgrade
  install - Install extensions listed in LIST
  upgrade - Like install, but passes --force to upgrade installed extensions
  export  - Write list of installed extensions to LIST
  lin2win - Overwrite Windows user configuration with Linux user configuration

LIST
  The path to the list.
  Default LIST: $DEFAULT_LIST
  Current LIST: $LIST
  Override by setting an environment variable, e.g.

    LIST=my/list.txt $SCRIPT_NAME install

LINUX_USER_CFG and WINDOWS_USER_CFG
  The paths to the Visual Studio Code user configuration
  <https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations>
  Default LINUX_USER_CFG: $LINUX_USER_CFG
  Default WINDOWS_USER_CFG: $WINDOWS_USER_CFG
  Override by setting environment variables, e.g.

    WINDOWS_USER_CFG=/win/User LINUX_USER_CFG=../lin/User $SCRIPT_NAME windows
"

_install() {
  local code_args install_directives
  code_args=( "$@" )
  read -ra install_directives <<< "$(
    sed <"$LIST" 's/^/--install-extension /g' |
      tr '\n' ' '
  )"
  (
    set -ex
    # eval is an easy way to get the arguments to parse after array expansion
    yes 0 | code "${code_args[@]}" "${install_directives[@]}"
  )
}

_upgrade() {
  _install --force
}

_export() {
  code --list-extensions | tee "$LIST"
}

_lin2win() {
  rsync -Paz "$LINUX_USER_CFG"/ "$WINDOWS_USER_CFG"/
}

_windows() {
  _lin2win && _upgrade
}

_print_usage_and_exit() {
  echo "$USAGE_TEXT"
  exit "$1"
}

_linux() {
  _upgrade && _export
}

case "$1" in
default | '')
  if uname -a | grep Microsoft; then
    _windows
  else
    _linux
  fi
  ;;
linux)
  _linux
  ;;
install)
  _install
  ;;
upgrade)
  _upgrade
  ;;
export)
  _export
  ;;
lin2win)
  _lin2win
  ;;
windows)
  _windows
  ;;
-h | --help | help)
  _print_usage_and_exit $OK
  ;;
*)
  _print_usage_and_exit $USAGE
  ;;
esac

:
